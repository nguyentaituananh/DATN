import { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import {
	ShoppingCart,
	Heart,
	Share2,
	Minus,
	Plus,
	Shield,
	Truck,
	RefreshCw,
	Star,
	ArrowLeft,
	AlertCircle
} from 'lucide-react'
import type { IProduct } from '@/types/products'
import { useGetProduct } from '@/hooks/products/useProducts'
import { useAddToCart } from '@/hooks/cart/useCart' // Import the hook
import placeholderImage from '@/assets/images/placeholder-image.png'

const formatPrice = (price: number) => new Intl.NumberFormat('vi-VN').format(price) + 'ƒë'

const DetailProduct = () => {
	const { id } = useParams<{ id: string }>()
	const navigate = useNavigate()
	const [selectedImage, setSelectedImage] = useState<string>('')
	const [tab, setTab] = useState<'details' | 'warranty'>('details')
	const [quantity, setQuantity] = useState(1)

	const { data: productResponse, isLoading, isError, error } = useGetProduct(id || '')
	const { mutate: addToCart } = useAddToCart() // Instantiate the hook

	const product: IProduct | undefined = productResponse?.metadata

	useEffect(() => {
		if (product?.images?.[0] && !selectedImage) {
			setSelectedImage(product.images[0])
		}
	}, [product, selectedImage])

	const handleAddToCart = () => {
		if (product && !isOutOfStock) {
			addToCart({ productId: product._id, quantity })
		}
	}

	// Loading state
	if (isLoading) {
		return (
			<div className="min-h-screen flex items-center justify-center bg-gray-50">
				<div className="flex flex-col items-center space-y-4">
					<div className="w-12 h-12 border-4 border-orange-600 border-t-transparent rounded-full animate-spin"></div>
					<p className="text-gray-600 text-lg">ƒêang t·∫£i s·∫£n ph·∫©m...</p>
				</div>
			</div>
		)
	}

	// Error state
	if (isError) {
		return (
			<div className="min-h-screen flex items-center justify-center bg-gray-50">
				<div className="text-center">
					<div className="w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
						<AlertCircle className="w-12 h-12 text-red-500" />
					</div>
					<h2 className="text-2xl font-bold text-gray-900 mb-2">C√≥ l·ªói x·∫£y ra</h2>
					<p className="text-red-500 text-lg mb-4">{error?.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m'}</p>
					<button
						onClick={() => navigate(-1)}
						className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg transition-colors"
					>
						<ArrowLeft className="w-4 h-4 inline mr-2" />
						Quay l·∫°i
					</button>
				</div>
			</div>
		)
	}

	// Product not found
	if (!product) {
		return (
			<div className="min-h-screen flex items-center justify-center bg-gray-50">
				<div className="text-center">
					<div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
						<span className="text-gray-400 text-4xl">üì¶</span>
					</div>
					<h2 className="text-2xl font-bold text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m</h2>
					<p className="text-gray-600 mb-4">S·∫£n ph·∫©m b·∫°n t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a</p>
					<button
						onClick={() => navigate('/products')}
						className="bg-orange-600 hover:bg-orange-700 text-white px-6 py-2 rounded-lg transition-colors"
					>
						Xem t·∫•t c·∫£ s·∫£n ph·∫©m
					</button>
				</div>
			</div>
		)
	}

	// Calculate product data
	const originalPrice = Number(product.original_price || 0)
	const currentPrice = Number(product.price || 0)
	const hasDiscount = originalPrice > currentPrice && originalPrice > 0
	const discountPercent = hasDiscount ? Math.round(((originalPrice - currentPrice) / originalPrice) * 100) : 0
	const isOutOfStock = Number(product.quantity || 0) === 0
	const rating = Number(product.rating_average || 0)

	return (
		<div className="min-h-screen bg-gray-50">
			{/* Breadcrumb */}
			<div className="bg-white border-b">
				<div className="max-w-7xl mx-auto px-4 py-4">
					<nav className="flex items-center space-x-2 text-sm text-gray-600">
						<button onClick={() => navigate('/')} className="hover:text-orange-600 transition-colors">
							Trang ch·ªß
						</button>
						<span>/</span>
						<button onClick={() => navigate('/products')} className="hover:text-orange-600 transition-colors">
							S·∫£n ph·∫©m
						</button>
						<span>/</span>
						<span className="text-gray-900 font-medium line-clamp-1">{product.name}</span>
					</nav>
				</div>
			</div>

			<div className="max-w-7xl mx-auto px-4 py-8">
				<div className="bg-white rounded-2xl shadow-lg overflow-hidden">
					<div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-8">
						{/* LEFT: Images */}
						<div className="space-y-4">
							{/* Main Image */}
							<div className="relative group">
								<img
									src={selectedImage || product.images?.[0] || placeholderImage}
									alt={product.name}
									className="w-full h-[500px] object-cover rounded-xl shadow-lg"
									onError={(e) => {
										e.currentTarget.src = placeholderImage
									}}
								/>
								<div className="absolute top-4 right-4 flex space-x-2">
									<button className="bg-white/80 backdrop-blur-sm p-2 rounded-full hover:bg-white transition-colors">
										<Heart className="w-5 h-5 text-gray-600" />
									</button>
									<button className="bg-white/80 backdrop-blur-sm p-2 rounded-full hover:bg-white transition-colors">
										<Share2 className="w-5 h-5 text-gray-600" />
									</button>
								</div>

								{/* Discount Badge */}
								{discountPercent > 0 && (
									<div className="absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
										-{discountPercent}%
									</div>
								)}

								{/* Out of Stock Overlay */}
								{isOutOfStock && (
									<div className="absolute inset-0 bg-black/20 backdrop-blur-sm rounded-xl flex items-center justify-center">
										<span className="bg-white px-4 py-2 rounded-lg text-gray-800 font-semibold">H·∫øt h√†ng</span>
									</div>
								)}
							</div>

							{/* Image Thumbnails */}
							{product.images && product.images.length > 1 && (
								<div className="flex space-x-3 overflow-x-auto p-2">
									{product.images.map((img, idx) => (
										<img
											key={idx}
											src={img}
											alt={`${product.name} - ${idx + 1}`}
											className={`flex-shrink-0 w-20 h-20 object-cover rounded-lg cursor-pointer transition-all ${
												selectedImage === img
													? 'ring-4 ring-orange-600 ring-opacity-50 scale-105'
													: 'hover:scale-105 hover:shadow-md'
											}`}
											onClick={() => setSelectedImage(img)}
											onError={(e) => {
												e.currentTarget.src = placeholderImage
											}}
										/>
									))}
								</div>
							)}
						</div>

						{/* RIGHT: Product Info */}
						<div className="space-y-6">
							{/* Product Name */}
							<div>
								<h1 className="text-3xl font-bold text-gray-900 mb-3">{product.name}</h1>
								<div className="flex items-center space-x-2">
									<div className="flex items-center">
										{[...Array(5)].map((_, i) => (
											<Star
												key={i}
												className={`w-5 h-5 ${
													i < Math.floor(rating) ? 'text-yellow-400 fill-current' : 'text-gray-300'
												}`}
											/>
										))}
									</div>
									<span className="text-gray-600">({rating.toFixed(1)})</span>
									<span className="text-gray-400">‚Ä¢</span>
									<span className="text-gray-600">C√≤n {Number(product.quantity || 0)} s·∫£n ph·∫©m</span>
								</div>
							</div>

							{/* Price */}
							<div className="bg-gradient-to-r from-orange-50 to-red-50 p-6 rounded-xl border border-orange-100">
								<div className="flex items-center space-x-4 mb-2">
									<span className="text-3xl font-bold text-orange-600">{formatPrice(currentPrice)}</span>
									{hasDiscount && (
										<>
											<span className="text-xl text-gray-500 line-through">{formatPrice(originalPrice)}</span>
											<span className="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold">
												-{discountPercent}%
											</span>
										</>
									)}
								</div>
								{hasDiscount && (
									<p className="text-green-600 text-sm font-medium">
										Ti·∫øt ki·ªám {formatPrice(originalPrice - currentPrice)}
									</p>
								)}
								<p className="text-gray-600 text-sm mt-1">Gi√° ƒë√£ bao g·ªìm VAT</p>
							</div>

							{/* Product Details */}
							{(product.material || product.size) && (
								<div className="grid grid-cols-2 gap-4">
									{product.material && (
										<div className="bg-gray-50 p-4 rounded-lg">
											<span className="text-gray-500 text-sm block">V·∫≠t li·ªáu</span>
											<span className="font-semibold text-gray-900">{product.material}</span>
										</div>
									)}
									{product.size && (
										<div className="bg-gray-50 p-4 rounded-lg">
											<span className="text-gray-500 text-sm block">K√≠ch th∆∞·ªõc</span>
											<span className="font-semibold text-gray-900">{product.size}</span>
										</div>
									)}
								</div>
							)}

							{/* Category */}
							{product.category_id && (
								<div className="flex items-center space-x-2">
									<span className="text-gray-500">Danh m·ª•c:</span>
									<span className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm font-medium">
										{typeof product.category_id === 'object' ? product.category_id.name : product.category_id}
									</span>
								</div>
							)}

							{/* Quantity Selector */}
							<div className="space-y-2">
								<label className="text-gray-700 font-semibold">S·ªë l∆∞·ª£ng:</label>
								<div className="flex items-center space-x-4">
									<div className="flex items-center border-2 border-gray-200 rounded-lg">
										<button
											onClick={() => setQuantity(Math.max(1, quantity - 1))}
											className="p-3 hover:bg-gray-50 transition-colors disabled:opacity-50"
											disabled={quantity <= 1}
										>
											<Minus className="w-4 h-4" />
										</button>
										<span className="px-6 py-3 font-semibold text-lg">{quantity}</span>
										<button
											onClick={() => setQuantity(Math.min(Number(product.quantity || 1), quantity + 1))}
											className="p-3 hover:bg-gray-50 transition-colors disabled:opacity-50"
											disabled={quantity >= Number(product.quantity || 1)}
										>
											<Plus className="w-4 h-4" />
										</button>
									</div>
									<span className="text-gray-600">
										{isOutOfStock ? 'H·∫øt h√†ng' : `${Number(product.quantity || 0)} s·∫£n ph·∫©m c√≥ s·∫µn`}
									</span>
								</div>
							</div>

							{/* Action Buttons */}
							<div className="space-y-4">
								<div className="flex space-x-4">
									<button
										className={`flex-1 py-4 px-6 rounded-xl font-bold text-lg transition-all transform ${
											isOutOfStock
												? 'bg-gray-300 text-gray-500 cursor-not-allowed'
												: 'bg-orange-600 hover:bg-red-600 text-white hover:scale-105'
										}`}
										disabled={isOutOfStock}
									>
										{isOutOfStock ? 'H·∫æT H√ÄNG' : 'MUA NGAY'}
									</button>
									<button
										onClick={handleAddToCart}
										className={`flex-1 py-4 px-6 rounded-xl font-bold text-lg transition-all flex items-center justify-center space-x-2 ${
											isOutOfStock
												? 'border-2 border-gray-300 text-gray-500 cursor-not-allowed'
												: 'border-2 border-orange-600 text-orange-600 hover:bg-orange-600 hover:text-white'
										}`}
										disabled={isOutOfStock}
									>
										<ShoppingCart className="w-5 h-5" />
										<span>TH√äM V√ÄO GI·ªé</span>
									</button>
								</div>

								{/* Member Offer */}
								{!isOutOfStock && (
									<div className="bg-gradient-to-r from-green-100 to-emerald-100 p-4 rounded-xl border border-green-200">
										<div className="flex items-center justify-between">
											<div className="flex items-center space-x-3">
												<div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center">
													<span className="text-white font-bold">%</span>
												</div>
												<div>
													<p className="font-semibold text-green-800">∆Øu ƒë√£i th√†nh vi√™n</p>
													<p className="text-green-700 text-sm">Gi·∫£m 5% khi ƒëƒÉng k√Ω th√†nh vi√™n</p>
												</div>
											</div>
											<button className="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-lg font-semibold transition-colors">
												ƒêƒÇNG K√ù
											</button>
										</div>
									</div>
								)}
							</div>

							{/* Features */}
							<div className="grid grid-cols-3 gap-4 pt-6 border-t border-gray-200">
								<div className="text-center space-y-2">
									<div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto">
										<Truck className="w-6 h-6 text-blue-600" />
									</div>
									<div>
										<p className="font-semibold text-sm">Mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn</p>
										<p className="text-xs text-gray-600">ƒê∆°n h√†ng l·ªõn h∆°n 5 tri·ªáu</p>
									</div>
								</div>
								<div className="text-center space-y-2">
									<div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto">
										<Shield className="w-6 h-6 text-green-600" />
									</div>
									<div>
										<p className="font-semibold text-sm">B·∫£o h√†nh 1 nƒÉm</p>
										<p className="text-xs text-gray-600">Ch√≠nh h√£ng</p>
									</div>
								</div>
								<div className="text-center space-y-2">
									<div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto">
										<RefreshCw className="w-6 h-6 text-orange-600" />
									</div>
									<div>
										<p className="font-semibold text-sm">ƒê·ªïi tr·∫£ 7 ng√†y</p>
										<p className="text-xs text-gray-600">Mi·ªÖn ph√≠</p>
									</div>
								</div>
							</div>
						</div>
					</div>

					{/* Tabs Section */}
					<div className="border-t border-gray-200 p-8">
						<div className="max-w-4xl">
							{/* Tab Navigation */}
							<div className="flex space-x-8 border-b border-gray-200 mb-6">
								<button
									className={`pb-4 px-2 font-semibold text-lg transition-colors relative ${
										tab === 'details'
											? 'text-orange-600 border-b-2 border-orange-600'
											: 'text-gray-500 hover:text-gray-700'
									}`}
									onClick={() => setTab('details')}
								>
									Chi ti·∫øt s·∫£n ph·∫©m
								</button>
								<button
									className={`pb-4 px-2 font-semibold text-lg transition-colors relative ${
										tab === 'warranty'
											? 'text-orange-600 border-b-2 border-orange-600'
											: 'text-gray-500 hover:text-gray-700'
									}`}
									onClick={() => setTab('warranty')}
								>
									Ch√≠nh s√°ch b·∫£o h√†nh
								</button>
							</div>

							{/* Tab Content */}
							<div className="prose prose-gray max-w-none">
								{tab === 'details' ? (
									<div className="bg-gray-50 p-6 rounded-xl">
										<div className="text-gray-700 leading-7 space-y-4">
											{product.description ? (
												<div
													className="prose prose-gray max-w-none"
													dangerouslySetInnerHTML={{ __html: product.description }}
												/>
											) : (
												<>
													<p>
														C√°c s·∫£n ph·∫©m n·ªôi th·∫•t t·∫°i ch√∫ng t√¥i ƒëa s·ªë ƒë·ªÅu ƒë∆∞·ª£c s·∫£n xu·∫•t t·∫°i nh√† m√°y c·ªßa c√¥ng ty c·ªï
														ph·∫ßn x√¢y d·ª±ng ki·∫øn tr√∫c AA v·ªõi ƒë·ªôi ng≈© nh√¢n vi√™n v√† c√¥ng nh√¢n ∆∞u t√∫ c√πng c∆° s·ªü v·∫≠t ch·∫•t
														hi·ªán ƒë·∫°i.
													</p>
													<p>
														Ch√∫ng t√¥i ƒë√£ ki·ªÉm tra k·ªπ l∆∞·ª°ng t·ª´ ngu·ªìn nguy√™n li·ªáu cho ƒë·∫øn s·∫£n ph·∫©m ho√†n thi·ªán cu·ªëi c√πng.
													</p>
													<p>
														Ch√∫ng t√¥i b·∫£o h√†nh m·ªôt nƒÉm cho c√°c tr∆∞·ªùng h·ª£p c√≥ l·ªói v·ªÅ k·ªπ thu·∫≠t trong qu√° tr√¨nh s·∫£n xu·∫•t
														hay l·∫Øp ƒë·∫∑t.
													</p>
													<div className="bg-orange-50 border-l-4 border-orange-600 p-4 rounded">
														<p className="font-semibold text-orange-800 mb-1">L∆∞u √Ω quan tr·ªçng:</p>
														<p>
															Qu√Ω kh√°ch kh√¥ng n√™n t·ª± s·ª≠a ch·ªØa m√† h√£y b√°o ngay cho ch√∫ng t√¥i qua hotline:{' '}
															<strong className="text-orange-600">1800 7200</strong>.
														</p>
													</div>
												</>
											)}
										</div>
									</div>
								) : (
									<div className="bg-gray-50 p-6 rounded-xl">
										<div className="grid md:grid-cols-2 gap-6">
											<div>
												<h3 className="font-bold text-lg text-gray-900 mb-4 flex items-center">
													<Shield className="w-5 h-5 text-green-600 mr-2" />
													Ch√≠nh s√°ch b·∫£o h√†nh
												</h3>
												<ul className="space-y-3 text-gray-700">
													<li className="flex items-start space-x-3">
														<div className="w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0"></div>
														<span>S·∫£n ph·∫©m ƒë∆∞·ª£c b·∫£o h√†nh ch√≠nh h√£ng t·ª´ nh√† cung c·∫•p.</span>
													</li>
													<li className="flex items-start space-x-3">
														<div className="w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0"></div>
														<span>ƒê·ªïi tr·∫£ trong 7 ng√†y n·∫øu l·ªói t·ª´ nh√† s·∫£n xu·∫•t.</span>
													</li>
													<li className="flex items-start space-x-3">
														<div className="w-2 h-2 bg-orange-600 rounded-full mt-2 flex-shrink-0"></div>
														<span>V·∫≠n chuy·ªÉn to√†n qu·ªëc, h·ªó tr·ª£ l·∫Øp ƒë·∫∑t n·ªôi th√†nh TP.HCM.</span>
													</li>
												</ul>
											</div>
											<div className="bg-white p-4 rounded-lg border border-gray-200">
												<h4 className="font-semibold text-gray-900 mb-3">Hotline h·ªó tr·ª£</h4>
												<div className="space-y-2 text-sm">
													<p>
														<strong>T∆∞ v·∫•n:</strong> 1800 7200
													</p>
													<p>
														<strong>K·ªπ thu·∫≠t:</strong> 1800 7201
													</p>
													<p>
														<strong>Email:</strong> support@furnihome.vn
													</p>
													<p>
														<strong>Th·ªùi gian:</strong> 8:00 - 18:00 (T2-T7)
													</p>
												</div>
											</div>
										</div>
									</div>
								)}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	)
}

export default DetailProduct
